#include <iostream>
using namespace std;

void eschedule(char mkeys[][49],char key[]){
	char modkey[57],temp1,temp2;
	int pc1[56] = {57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4};
	int pc2[48] = {14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32};
	
	for(int i=0;i<56;i++){
		modkey[i] = key[pc1[i]-1];
	}
	modkey[56] = '\0';
	
	for(int i=0;i<16;i++){
		temp1 = modkey[0];
		for(int j=0;j<27;j++){
			modkey[j] = modkey[j+1];
		}
		modkey[27] = temp1;
		
		temp2 = modkey[28];
		for(int j=28;j<55;j++){
			modkey[j] = modkey[j+1];
		}
		modkey[55] = temp2;
		
		for(int j=0;j<48;j++){
			mkeys[i][j] = modkey[pc2[j]-1];
		}
		mkeys[i][48] = '\0';
	}
}

void dschedule(char mkeys[][49],char key[]){
	char modkey[57],temp1,temp2;
	int pc1[56] = {57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4};
	int pc2[48] = {14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32};
	
	for(int i=0;i<56;i++){
		modkey[i] = key[pc1[i]-1];
	}
	modkey[56] = '\0';
	
	for(int i=0;i<16;i++){
		temp1 = modkey[0];
		for(int j=0;j<27;j++){
			modkey[j] = modkey[j+1];
		}
		modkey[27] = temp1;
		
		temp2 = modkey[28];
		for(int j=28;j<55;j++){
			modkey[j] = modkey[j+1];
		}
		modkey[55] = temp2;
		
		for(int j=0;j<48;j++){
			mkeys[15-i][j] = modkey[pc2[j]-1];
		}
		mkeys[15-i][48] = '\0';
	}
}

void func(char temp[],char key[]){
	int count,r,c,num,a,a0,a1,a2,a3,a4,a5,k;
	int exp[48] = {32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1};
	int permute[32] = {16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25};
	char str[49],m[33];
	
	int s[][4][16] = {{{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},{0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},{4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},{15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}},
				   {{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},{3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},{0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},{13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}},
				   {{10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},{13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},{13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},{1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}},
				   {{7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},{13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},{10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},{3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}},
				   {{2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},{14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},{4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},{11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}},
				   {{12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},{10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},{9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},{4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}},
				   {{4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},{13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},{1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},{6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}},
				   {{13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},{1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},{7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},{2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}}
				  };
	
	for(int i=0;i<48;i++){
		str[i] = temp[exp[i]-1];
	}
	str[48] = '\0';
	
	for(int i=0;i<48;i++){
		str[i] = (str[i]!=key[i]) ? '1' : '0';
	}
	
	count = 0;
	a=0;
	for(int i=0;i<48;i+=6){
		a0 = (str[i]=='1') ? 1 : 0;
		a1 = (str[i+1]=='1') ? 1 : 0;
		a2 = (str[i+2]=='1') ? 1 : 0;
		a3 = (str[i+3]=='1') ? 1 : 0;
		a4 = (str[i+4]=='1') ? 1 : 0;
		a5 = (str[i+5]=='1') ? 1 : 0;
		r = 2*a0+a5;
		c = 8*a1 + 4*a2 + 2*a3 + a4;
		num = s[count][r][c];
		k=3;
		while(k!=(-1)){
			temp[a+k] = (num%2 == 1) ? '1' : '0';
			num/=2;
			k--;
		}
		a+=4;
		count++;
	}
	
	for(int i=0;i<32;i++){
		m[i] = temp[i];
	}
	
	for(int i=0;i<32;i++){
		temp[i] = m[permute[i]-1];
	}
	temp[32] = '\0';
}

void DESencrypt(char plain[],char key[]){
	char temp[65],temp1[33];
	char mkeys[16][49];
	int ip[64] = {58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7};
	int ipinv[64] = {40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25};
	
	eschedule(mkeys,key);
	
	for(int i=0;i<64;i++){
		temp[i] = plain[i];
	}
	for(int i=0;i<64;i++){
		plain[i] = temp[ip[i]-1];
	}
	plain[64] = '\0';
	
	for(int i=0;i<16;i++){
		for(int j=0;j<64;j++){
			temp[j] = plain[j];
		}
		
		for(int j=0;j<32;j++){
			plain[j] = temp[32+j];
			temp1[j] = temp[32+j];
		}
		plain[64] = '\0';
		
		func(temp1,mkeys[i]);
		
		for(int j=32;j<64;j++){
			plain[j] = (temp[j-32]!=temp1[j-32]) ? '1' : '0';
		}
		plain[64] = '\0';
	}
	
	for(int i=0;i<64;i++){
		temp[i] = plain[i];
	}
	for(int i=0;i<64;i++){
		plain[i] = temp[ipinv[i]-1];
	}
	plain[64] = '\0';
}

void DESdecrypt(char plain[],char key[]){
	char temp[65],temp1[33];
	char mkeys[16][49];
	int ip[64] = {58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7};
	int ipinv[64] = {40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25};
	
	dschedule(mkeys,key);
	
	for(int i=0;i<64;i++){
		temp[i] = plain[i];
	}
	for(int i=0;i<64;i++){
		plain[i] = temp[ip[i]-1];
	}
	plain[64] = '\0';
	
	for(int i=0;i<16;i++){
		for(int j=0;j<64;j++){
			temp[j] = plain[j];
		}
		
		for(int j=0;j<32;j++){
			plain[j+32] = temp[j];
			temp1[j] = temp[j];
		}
		plain[64] = '\0';

		func(temp1,mkeys[i]);
		
		for(int j=0;j<32;j++){
			plain[j] = (temp[j+32]!=temp1[j]) ? '1' : '0';
		}
		plain[64] = '\0';
	}
	
	for(int i=0;i<64;i++){
		temp[i] = plain[i];
	}
	for(int i=0;i<64;i++){
		plain[i] = temp[ipinv[i]-1];
	}
	plain[64] = '\0';
}

void TripleDESencrypt(char plain[],char key[]){
	char key1[65],key2[65];
	
	for(int i=0;i<64;i++){
		key1[i] = key[i];
		key2[i] = key[i+64];
	}
	key1[64] = '\0';
	key2[64] = '\0';
	
	DESencrypt(plain,key1);
	DESdecrypt(plain,key2);
	DESencrypt(plain,key1);
}

void TripleDESdecrypt(char plain[],char key[]){
	char key1[65],key2[65];
	
	for(int i=0;i<64;i++){
		key1[i] = key[i];
		key2[i] = key[i+64];
	}
	key1[64] = '\0';
	key2[64] = '\0';
	
	DESdecrypt(plain,key1);
	DESencrypt(plain,key2);
	DESdecrypt(plain,key1);
}

int main() {
	char plain[65],key[129];
	cout<<"Enter the 64-bit plain text \n";
	cin>>plain;
	cout<<"Enter the 128-bit key \n";
	cin>>key;
	
	TripleDESencrypt(plain,key);
	cout<<"Text after encryption :- "<<plain<<endl;
	TripleDESdecrypt(plain,key);
	
	cout<<"Text after decryption :- "<<plain<<endl;
	return 0;
}
